// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace serialize_transport_catalogue {
PROTOBUF_CONSTEXPR RoutingSettings::RoutingSettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_wait_time_)*/0
  , /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutingSettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
PROTOBUF_CONSTEXPR VertexInfo::VertexInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_bus_stop_)*/false
  , /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexInfoDefaultTypeInternal() {}
  union {
    VertexInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
PROTOBUF_CONSTEXPR EdgeInfo::EdgeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_bus_edge_)*/false
  , /*decltype(_impl_.from_id_)*/0u
  , /*decltype(_impl_.to_id_)*/0u
  , /*decltype(_impl_.span_count_)*/0
  , /*decltype(_impl_.weight_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeInfoDefaultTypeInternal() {}
  union {
    EdgeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphInfo::GraphInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertexes_)*/{}
  , /*decltype(_impl_.edges_)*/{}
  , /*decltype(_impl_.routing_settings_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphInfoDefaultTypeInternal() {}
  union {
    GraphInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphInfoDefaultTypeInternal _GraphInfo_default_instance_;
}  // namespace serialize_transport_catalogue
static ::_pb::Metadata file_level_metadata_graph_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_graph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::RoutingSettings, _impl_.bus_wait_time_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::RoutingSettings, _impl_.bus_velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::VertexInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::VertexInfo, _impl_.stop_name_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::VertexInfo, _impl_.is_bus_stop_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::VertexInfo, _impl_.id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.is_bus_edge_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.from_id_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.to_id_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.span_count_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::EdgeInfo, _impl_.weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::GraphInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::GraphInfo, _impl_.vertexes_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::GraphInfo, _impl_.edges_),
  PROTOBUF_FIELD_OFFSET(::serialize_transport_catalogue::GraphInfo, _impl_.routing_settings_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::serialize_transport_catalogue::RoutingSettings)},
  { 8, -1, -1, sizeof(::serialize_transport_catalogue::VertexInfo)},
  { 17, -1, -1, sizeof(::serialize_transport_catalogue::EdgeInfo)},
  { 29, -1, -1, sizeof(::serialize_transport_catalogue::GraphInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::serialize_transport_catalogue::_RoutingSettings_default_instance_._instance,
  &::serialize_transport_catalogue::_VertexInfo_default_instance_._instance,
  &::serialize_transport_catalogue::_EdgeInfo_default_instance_._instance,
  &::serialize_transport_catalogue::_GraphInfo_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\035serialize_transport_catal"
  "ogue\">\n\017RoutingSettings\022\025\n\rbus_wait_time"
  "\030\001 \001(\001\022\024\n\014bus_velocity\030\002 \001(\001\"@\n\nVertexIn"
  "fo\022\021\n\tstop_name\030\001 \001(\t\022\023\n\013is_bus_stop\030\002 \001"
  "(\010\022\n\n\002id\030\003 \001(\r\"q\n\010EdgeInfo\022\023\n\013is_bus_edg"
  "e\030\001 \001(\010\022\017\n\007from_id\030\002 \001(\r\022\r\n\005to_id\030\003 \001(\r\022"
  "\022\n\nspan_count\030\004 \001(\005\022\014\n\004name\030\005 \001(\t\022\016\n\006wei"
  "ght\030\006 \001(\001\"\312\001\n\tGraphInfo\022;\n\010vertexes\030\001 \003("
  "\0132).serialize_transport_catalogue.Vertex"
  "Info\0226\n\005edges\030\002 \003(\0132\'.serialize_transpor"
  "t_catalogue.EdgeInfo\022H\n\020routing_settings"
  "\030\003 \001(\0132..serialize_transport_catalogue.R"
  "outingSettingsb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 502, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace serialize_transport_catalogue {

// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialize_transport_catalogue.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoutingSettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){}
    , decltype(_impl_.bus_velocity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_wait_time_, &from._impl_.bus_wait_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_velocity_) -
    reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  // @@protoc_insertion_point(copy_constructor:serialize_transport_catalogue.RoutingSettings)
}

inline void RoutingSettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_wait_time_){0}
    , decltype(_impl_.bus_velocity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:serialize_transport_catalogue.RoutingSettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoutingSettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:serialize_transport_catalogue.RoutingSettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_wait_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_velocity_) -
      reinterpret_cast<char*>(&_impl_.bus_wait_time_)) + sizeof(_impl_.bus_velocity_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bus_wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bus_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoutingSettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialize_transport_catalogue.RoutingSettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_wait_time(), target);
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialize_transport_catalogue.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialize_transport_catalogue.RoutingSettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_wait_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    total_size += 1 + 8;
  }

  // double bus_velocity = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoutingSettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoutingSettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoutingSettings::GetClassData() const { return &_class_data_; }


void RoutingSettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoutingSettings*>(&to_msg);
  auto& from = static_cast<const RoutingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serialize_transport_catalogue.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = from._internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialize_transport_catalogue.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_velocity_)
      + sizeof(RoutingSettings::_impl_.bus_velocity_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, _impl_.bus_wait_time_)>(
          reinterpret_cast<char*>(&_impl_.bus_wait_time_),
          reinterpret_cast<char*>(&other->_impl_.bus_wait_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class VertexInfo::_Internal {
 public:
};

VertexInfo::VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialize_transport_catalogue.VertexInfo)
}
VertexInfo::VertexInfo(const VertexInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_name_){}
    , decltype(_impl_.is_bus_stop_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_name().empty()) {
    _this->_impl_.stop_name_.Set(from._internal_stop_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_bus_stop_, &from._impl_.is_bus_stop_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.is_bus_stop_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:serialize_transport_catalogue.VertexInfo)
}

inline void VertexInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_name_){}
    , decltype(_impl_.is_bus_stop_){false}
    , decltype(_impl_.id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stop_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VertexInfo::~VertexInfo() {
  // @@protoc_insertion_point(destructor:serialize_transport_catalogue.VertexInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_name_.Destroy();
}

void VertexInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialize_transport_catalogue.VertexInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_name_.ClearToEmpty();
  ::memset(&_impl_.is_bus_stop_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.is_bus_stop_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serialize_transport_catalogue.VertexInfo.stop_name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_bus_stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_bus_stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialize_transport_catalogue.VertexInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stop_name = 1;
  if (!this->_internal_stop_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_name().data(), static_cast<int>(this->_internal_stop_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialize_transport_catalogue.VertexInfo.stop_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stop_name(), target);
  }

  // bool is_bus_stop = 2;
  if (this->_internal_is_bus_stop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_bus_stop(), target);
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialize_transport_catalogue.VertexInfo)
  return target;
}

size_t VertexInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialize_transport_catalogue.VertexInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_name = 1;
  if (!this->_internal_stop_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_name());
  }

  // bool is_bus_stop = 2;
  if (this->_internal_is_bus_stop() != 0) {
    total_size += 1 + 1;
  }

  // uint32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexInfo::GetClassData() const { return &_class_data_; }


void VertexInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexInfo*>(&to_msg);
  auto& from = static_cast<const VertexInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serialize_transport_catalogue.VertexInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_name().empty()) {
    _this->_internal_set_stop_name(from._internal_stop_name());
  }
  if (from._internal_is_bus_stop() != 0) {
    _this->_internal_set_is_bus_stop(from._internal_is_bus_stop());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexInfo::CopyFrom(const VertexInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialize_transport_catalogue.VertexInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexInfo::IsInitialized() const {
  return true;
}

void VertexInfo::InternalSwap(VertexInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_name_, lhs_arena,
      &other->_impl_.stop_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.id_)
      + sizeof(VertexInfo::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(VertexInfo, _impl_.is_bus_stop_)>(
          reinterpret_cast<char*>(&_impl_.is_bus_stop_),
          reinterpret_cast<char*>(&other->_impl_.is_bus_stop_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class EdgeInfo::_Internal {
 public:
};

EdgeInfo::EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialize_transport_catalogue.EdgeInfo)
}
EdgeInfo::EdgeInfo(const EdgeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_bus_edge_){}
    , decltype(_impl_.from_id_){}
    , decltype(_impl_.to_id_){}
    , decltype(_impl_.span_count_){}
    , decltype(_impl_.weight_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.is_bus_edge_, &from._impl_.is_bus_edge_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.weight_) -
    reinterpret_cast<char*>(&_impl_.is_bus_edge_)) + sizeof(_impl_.weight_));
  // @@protoc_insertion_point(copy_constructor:serialize_transport_catalogue.EdgeInfo)
}

inline void EdgeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.is_bus_edge_){false}
    , decltype(_impl_.from_id_){0u}
    , decltype(_impl_.to_id_){0u}
    , decltype(_impl_.span_count_){0}
    , decltype(_impl_.weight_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EdgeInfo::~EdgeInfo() {
  // @@protoc_insertion_point(destructor:serialize_transport_catalogue.EdgeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void EdgeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialize_transport_catalogue.EdgeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.is_bus_edge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.weight_) -
      reinterpret_cast<char*>(&_impl_.is_bus_edge_)) + sizeof(_impl_.weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_bus_edge = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_bus_edge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 from_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 to_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 span_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "serialize_transport_catalogue.EdgeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // double weight = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialize_transport_catalogue.EdgeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_bus_edge = 1;
  if (this->_internal_is_bus_edge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_bus_edge(), target);
  }

  // uint32 from_id = 2;
  if (this->_internal_from_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_from_id(), target);
  }

  // uint32 to_id = 3;
  if (this->_internal_to_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_to_id(), target);
  }

  // int32 span_count = 4;
  if (this->_internal_span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_span_count(), target);
  }

  // string name = 5;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "serialize_transport_catalogue.EdgeInfo.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // double weight = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialize_transport_catalogue.EdgeInfo)
  return target;
}

size_t EdgeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialize_transport_catalogue.EdgeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 5;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_bus_edge = 1;
  if (this->_internal_is_bus_edge() != 0) {
    total_size += 1 + 1;
  }

  // uint32 from_id = 2;
  if (this->_internal_from_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_from_id());
  }

  // uint32 to_id = 3;
  if (this->_internal_to_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_id());
  }

  // int32 span_count = 4;
  if (this->_internal_span_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_span_count());
  }

  // double weight = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = this->_internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeInfo::GetClassData() const { return &_class_data_; }


void EdgeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeInfo*>(&to_msg);
  auto& from = static_cast<const EdgeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serialize_transport_catalogue.EdgeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_bus_edge() != 0) {
    _this->_internal_set_is_bus_edge(from._internal_is_bus_edge());
  }
  if (from._internal_from_id() != 0) {
    _this->_internal_set_from_id(from._internal_from_id());
  }
  if (from._internal_to_id() != 0) {
    _this->_internal_set_to_id(from._internal_to_id());
  }
  if (from._internal_span_count() != 0) {
    _this->_internal_set_span_count(from._internal_span_count());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_weight = from._internal_weight();
  uint64_t raw_weight;
  memcpy(&raw_weight, &tmp_weight, sizeof(tmp_weight));
  if (raw_weight != 0) {
    _this->_internal_set_weight(from._internal_weight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeInfo::CopyFrom(const EdgeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialize_transport_catalogue.EdgeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeInfo::IsInitialized() const {
  return true;
}

void EdgeInfo::InternalSwap(EdgeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.weight_)
      + sizeof(EdgeInfo::_impl_.weight_)
      - PROTOBUF_FIELD_OFFSET(EdgeInfo, _impl_.is_bus_edge_)>(
          reinterpret_cast<char*>(&_impl_.is_bus_edge_),
          reinterpret_cast<char*>(&other->_impl_.is_bus_edge_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class GraphInfo::_Internal {
 public:
  static const ::serialize_transport_catalogue::RoutingSettings& routing_settings(const GraphInfo* msg);
};

const ::serialize_transport_catalogue::RoutingSettings&
GraphInfo::_Internal::routing_settings(const GraphInfo* msg) {
  return *msg->_impl_.routing_settings_;
}
GraphInfo::GraphInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:serialize_transport_catalogue.GraphInfo)
}
GraphInfo::GraphInfo(const GraphInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertexes_){from._impl_.vertexes_}
    , decltype(_impl_.edges_){from._impl_.edges_}
    , decltype(_impl_.routing_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_settings()) {
    _this->_impl_.routing_settings_ = new ::serialize_transport_catalogue::RoutingSettings(*from._impl_.routing_settings_);
  }
  // @@protoc_insertion_point(copy_constructor:serialize_transport_catalogue.GraphInfo)
}

inline void GraphInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertexes_){arena}
    , decltype(_impl_.edges_){arena}
    , decltype(_impl_.routing_settings_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphInfo::~GraphInfo() {
  // @@protoc_insertion_point(destructor:serialize_transport_catalogue.GraphInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertexes_.~RepeatedPtrField();
  _impl_.edges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.routing_settings_;
}

void GraphInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:serialize_transport_catalogue.GraphInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertexes_.Clear();
  _impl_.edges_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .serialize_transport_catalogue.VertexInfo vertexes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertexes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .serialize_transport_catalogue.EdgeInfo edges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .serialize_transport_catalogue.RoutingSettings routing_settings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:serialize_transport_catalogue.GraphInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .serialize_transport_catalogue.VertexInfo vertexes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertexes_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertexes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .serialize_transport_catalogue.EdgeInfo edges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edges_size()); i < n; i++) {
    const auto& repfield = this->_internal_edges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .serialize_transport_catalogue.RoutingSettings routing_settings = 3;
  if (this->_internal_has_routing_settings()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::routing_settings(this),
        _Internal::routing_settings(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:serialize_transport_catalogue.GraphInfo)
  return target;
}

size_t GraphInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:serialize_transport_catalogue.GraphInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .serialize_transport_catalogue.VertexInfo vertexes = 1;
  total_size += 1UL * this->_internal_vertexes_size();
  for (const auto& msg : this->_impl_.vertexes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .serialize_transport_catalogue.EdgeInfo edges = 2;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->_impl_.edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .serialize_transport_catalogue.RoutingSettings routing_settings = 3;
  if (this->_internal_has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.routing_settings_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphInfo::GetClassData() const { return &_class_data_; }


void GraphInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphInfo*>(&to_msg);
  auto& from = static_cast<const GraphInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:serialize_transport_catalogue.GraphInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertexes_.MergeFrom(from._impl_.vertexes_);
  _this->_impl_.edges_.MergeFrom(from._impl_.edges_);
  if (from._internal_has_routing_settings()) {
    _this->_internal_mutable_routing_settings()->::serialize_transport_catalogue::RoutingSettings::MergeFrom(
        from._internal_routing_settings());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphInfo::CopyFrom(const GraphInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:serialize_transport_catalogue.GraphInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphInfo::IsInitialized() const {
  return true;
}

void GraphInfo::InternalSwap(GraphInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertexes_.InternalSwap(&other->_impl_.vertexes_);
  _impl_.edges_.InternalSwap(&other->_impl_.edges_);
  swap(_impl_.routing_settings_, other->_impl_.routing_settings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace serialize_transport_catalogue
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::serialize_transport_catalogue::RoutingSettings*
Arena::CreateMaybeMessage< ::serialize_transport_catalogue::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialize_transport_catalogue::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::serialize_transport_catalogue::VertexInfo*
Arena::CreateMaybeMessage< ::serialize_transport_catalogue::VertexInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialize_transport_catalogue::VertexInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialize_transport_catalogue::EdgeInfo*
Arena::CreateMaybeMessage< ::serialize_transport_catalogue::EdgeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialize_transport_catalogue::EdgeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::serialize_transport_catalogue::GraphInfo*
Arena::CreateMaybeMessage< ::serialize_transport_catalogue::GraphInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::serialize_transport_catalogue::GraphInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
