// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_graph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_graph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_graph_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_graph_2eproto;
namespace serialize_transport_catalogue {
class EdgeInfo;
struct EdgeInfoDefaultTypeInternal;
extern EdgeInfoDefaultTypeInternal _EdgeInfo_default_instance_;
class GraphInfo;
struct GraphInfoDefaultTypeInternal;
extern GraphInfoDefaultTypeInternal _GraphInfo_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class VertexInfo;
struct VertexInfoDefaultTypeInternal;
extern VertexInfoDefaultTypeInternal _VertexInfo_default_instance_;
}  // namespace serialize_transport_catalogue
PROTOBUF_NAMESPACE_OPEN
template<> ::serialize_transport_catalogue::EdgeInfo* Arena::CreateMaybeMessage<::serialize_transport_catalogue::EdgeInfo>(Arena*);
template<> ::serialize_transport_catalogue::GraphInfo* Arena::CreateMaybeMessage<::serialize_transport_catalogue::GraphInfo>(Arena*);
template<> ::serialize_transport_catalogue::RoutingSettings* Arena::CreateMaybeMessage<::serialize_transport_catalogue::RoutingSettings>(Arena*);
template<> ::serialize_transport_catalogue::VertexInfo* Arena::CreateMaybeMessage<::serialize_transport_catalogue::VertexInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialize_transport_catalogue {

// ===================================================================

class RoutingSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  ~RoutingSettings() override;
  explicit PROTOBUF_CONSTEXPR RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoutingSettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoutingSettings& from) {
    RoutingSettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusWaitTimeFieldNumber = 1,
    kBusVelocityFieldNumber = 2,
  };
  // double bus_wait_time = 1;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // double bus_velocity = 2;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_wait_time_;
    double bus_velocity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class VertexInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.VertexInfo) */ {
 public:
  inline VertexInfo() : VertexInfo(nullptr) {}
  ~VertexInfo() override;
  explicit PROTOBUF_CONSTEXPR VertexInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VertexInfo(const VertexInfo& from);
  VertexInfo(VertexInfo&& from) noexcept
    : VertexInfo() {
    *this = ::std::move(from);
  }

  inline VertexInfo& operator=(const VertexInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VertexInfo& operator=(VertexInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VertexInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VertexInfo* internal_default_instance() {
    return reinterpret_cast<const VertexInfo*>(
               &_VertexInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VertexInfo& a, VertexInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VertexInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VertexInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VertexInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VertexInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VertexInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VertexInfo& from) {
    VertexInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VertexInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.VertexInfo";
  }
  protected:
  explicit VertexInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
    kIsBusStopFieldNumber = 2,
    kIdFieldNumber = 3,
  };
  // string stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stop_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stop_name();
  PROTOBUF_NODISCARD std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // bool is_bus_stop = 2;
  void clear_is_bus_stop();
  bool is_bus_stop() const;
  void set_is_bus_stop(bool value);
  private:
  bool _internal_is_bus_stop() const;
  void _internal_set_is_bus_stop(bool value);
  public:

  // uint32 id = 3;
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.VertexInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
    bool is_bus_stop_;
    uint32_t id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class EdgeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.EdgeInfo) */ {
 public:
  inline EdgeInfo() : EdgeInfo(nullptr) {}
  ~EdgeInfo() override;
  explicit PROTOBUF_CONSTEXPR EdgeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgeInfo(const EdgeInfo& from);
  EdgeInfo(EdgeInfo&& from) noexcept
    : EdgeInfo() {
    *this = ::std::move(from);
  }

  inline EdgeInfo& operator=(const EdgeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgeInfo& operator=(EdgeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EdgeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgeInfo* internal_default_instance() {
    return reinterpret_cast<const EdgeInfo*>(
               &_EdgeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EdgeInfo& a, EdgeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgeInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EdgeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EdgeInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EdgeInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const EdgeInfo& from) {
    EdgeInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.EdgeInfo";
  }
  protected:
  explicit EdgeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kIsBusEdgeFieldNumber = 1,
    kFromIdFieldNumber = 2,
    kToIdFieldNumber = 3,
    kSpanCountFieldNumber = 4,
    kWeightFieldNumber = 6,
  };
  // string name = 5;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_bus_edge = 1;
  void clear_is_bus_edge();
  bool is_bus_edge() const;
  void set_is_bus_edge(bool value);
  private:
  bool _internal_is_bus_edge() const;
  void _internal_set_is_bus_edge(bool value);
  public:

  // uint32 from_id = 2;
  void clear_from_id();
  uint32_t from_id() const;
  void set_from_id(uint32_t value);
  private:
  uint32_t _internal_from_id() const;
  void _internal_set_from_id(uint32_t value);
  public:

  // uint32 to_id = 3;
  void clear_to_id();
  uint32_t to_id() const;
  void set_to_id(uint32_t value);
  private:
  uint32_t _internal_to_id() const;
  void _internal_set_to_id(uint32_t value);
  public:

  // int32 span_count = 4;
  void clear_span_count();
  int32_t span_count() const;
  void set_span_count(int32_t value);
  private:
  int32_t _internal_span_count() const;
  void _internal_set_span_count(int32_t value);
  public:

  // double weight = 6;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.EdgeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_bus_edge_;
    uint32_t from_id_;
    uint32_t to_id_;
    int32_t span_count_;
    double weight_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// -------------------------------------------------------------------

class GraphInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.GraphInfo) */ {
 public:
  inline GraphInfo() : GraphInfo(nullptr) {}
  ~GraphInfo() override;
  explicit PROTOBUF_CONSTEXPR GraphInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GraphInfo(const GraphInfo& from);
  GraphInfo(GraphInfo&& from) noexcept
    : GraphInfo() {
    *this = ::std::move(from);
  }

  inline GraphInfo& operator=(const GraphInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GraphInfo& operator=(GraphInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GraphInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GraphInfo* internal_default_instance() {
    return reinterpret_cast<const GraphInfo*>(
               &_GraphInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GraphInfo& a, GraphInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GraphInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GraphInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GraphInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GraphInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GraphInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GraphInfo& from) {
    GraphInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.GraphInfo";
  }
  protected:
  explicit GraphInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexesFieldNumber = 1,
    kEdgesFieldNumber = 2,
    kRoutingSettingsFieldNumber = 3,
  };
  // repeated .serialize_transport_catalogue.VertexInfo vertexes = 1;
  int vertexes_size() const;
  private:
  int _internal_vertexes_size() const;
  public:
  void clear_vertexes();
  ::serialize_transport_catalogue::VertexInfo* mutable_vertexes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::VertexInfo >*
      mutable_vertexes();
  private:
  const ::serialize_transport_catalogue::VertexInfo& _internal_vertexes(int index) const;
  ::serialize_transport_catalogue::VertexInfo* _internal_add_vertexes();
  public:
  const ::serialize_transport_catalogue::VertexInfo& vertexes(int index) const;
  ::serialize_transport_catalogue::VertexInfo* add_vertexes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::VertexInfo >&
      vertexes() const;

  // repeated .serialize_transport_catalogue.EdgeInfo edges = 2;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::serialize_transport_catalogue::EdgeInfo* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::EdgeInfo >*
      mutable_edges();
  private:
  const ::serialize_transport_catalogue::EdgeInfo& _internal_edges(int index) const;
  ::serialize_transport_catalogue::EdgeInfo* _internal_add_edges();
  public:
  const ::serialize_transport_catalogue::EdgeInfo& edges(int index) const;
  ::serialize_transport_catalogue::EdgeInfo* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::EdgeInfo >&
      edges() const;

  // .serialize_transport_catalogue.RoutingSettings routing_settings = 3;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::serialize_transport_catalogue::RoutingSettings& routing_settings() const;
  PROTOBUF_NODISCARD ::serialize_transport_catalogue::RoutingSettings* release_routing_settings();
  ::serialize_transport_catalogue::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::serialize_transport_catalogue::RoutingSettings* routing_settings);
  private:
  const ::serialize_transport_catalogue::RoutingSettings& _internal_routing_settings() const;
  ::serialize_transport_catalogue::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::serialize_transport_catalogue::RoutingSettings* routing_settings);
  ::serialize_transport_catalogue::RoutingSettings* unsafe_arena_release_routing_settings();

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.GraphInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::VertexInfo > vertexes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::EdgeInfo > edges_;
    ::serialize_transport_catalogue::RoutingSettings* routing_settings_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_graph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoutingSettings

// double bus_wait_time = 1;
inline void RoutingSettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double RoutingSettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double RoutingSettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.RoutingSettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void RoutingSettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void RoutingSettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.RoutingSettings.bus_wait_time)
}

// double bus_velocity = 2;
inline void RoutingSettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double RoutingSettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double RoutingSettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.RoutingSettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void RoutingSettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void RoutingSettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.RoutingSettings.bus_velocity)
}

// -------------------------------------------------------------------

// VertexInfo

// string stop_name = 1;
inline void VertexInfo::clear_stop_name() {
  _impl_.stop_name_.ClearToEmpty();
}
inline const std::string& VertexInfo::stop_name() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.VertexInfo.stop_name)
  return _internal_stop_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VertexInfo::set_stop_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.stop_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.VertexInfo.stop_name)
}
inline std::string* VertexInfo::mutable_stop_name() {
  std::string* _s = _internal_mutable_stop_name();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.VertexInfo.stop_name)
  return _s;
}
inline const std::string& VertexInfo::_internal_stop_name() const {
  return _impl_.stop_name_.Get();
}
inline void VertexInfo::_internal_set_stop_name(const std::string& value) {
  
  _impl_.stop_name_.Set(value, GetArenaForAllocation());
}
inline std::string* VertexInfo::_internal_mutable_stop_name() {
  
  return _impl_.stop_name_.Mutable(GetArenaForAllocation());
}
inline std::string* VertexInfo::release_stop_name() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.VertexInfo.stop_name)
  return _impl_.stop_name_.Release();
}
inline void VertexInfo::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  _impl_.stop_name_.SetAllocated(stop_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.stop_name_.IsDefault()) {
    _impl_.stop_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.VertexInfo.stop_name)
}

// bool is_bus_stop = 2;
inline void VertexInfo::clear_is_bus_stop() {
  _impl_.is_bus_stop_ = false;
}
inline bool VertexInfo::_internal_is_bus_stop() const {
  return _impl_.is_bus_stop_;
}
inline bool VertexInfo::is_bus_stop() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.VertexInfo.is_bus_stop)
  return _internal_is_bus_stop();
}
inline void VertexInfo::_internal_set_is_bus_stop(bool value) {
  
  _impl_.is_bus_stop_ = value;
}
inline void VertexInfo::set_is_bus_stop(bool value) {
  _internal_set_is_bus_stop(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.VertexInfo.is_bus_stop)
}

// uint32 id = 3;
inline void VertexInfo::clear_id() {
  _impl_.id_ = 0u;
}
inline uint32_t VertexInfo::_internal_id() const {
  return _impl_.id_;
}
inline uint32_t VertexInfo::id() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.VertexInfo.id)
  return _internal_id();
}
inline void VertexInfo::_internal_set_id(uint32_t value) {
  
  _impl_.id_ = value;
}
inline void VertexInfo::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.VertexInfo.id)
}

// -------------------------------------------------------------------

// EdgeInfo

// bool is_bus_edge = 1;
inline void EdgeInfo::clear_is_bus_edge() {
  _impl_.is_bus_edge_ = false;
}
inline bool EdgeInfo::_internal_is_bus_edge() const {
  return _impl_.is_bus_edge_;
}
inline bool EdgeInfo::is_bus_edge() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.is_bus_edge)
  return _internal_is_bus_edge();
}
inline void EdgeInfo::_internal_set_is_bus_edge(bool value) {
  
  _impl_.is_bus_edge_ = value;
}
inline void EdgeInfo::set_is_bus_edge(bool value) {
  _internal_set_is_bus_edge(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.is_bus_edge)
}

// uint32 from_id = 2;
inline void EdgeInfo::clear_from_id() {
  _impl_.from_id_ = 0u;
}
inline uint32_t EdgeInfo::_internal_from_id() const {
  return _impl_.from_id_;
}
inline uint32_t EdgeInfo::from_id() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.from_id)
  return _internal_from_id();
}
inline void EdgeInfo::_internal_set_from_id(uint32_t value) {
  
  _impl_.from_id_ = value;
}
inline void EdgeInfo::set_from_id(uint32_t value) {
  _internal_set_from_id(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.from_id)
}

// uint32 to_id = 3;
inline void EdgeInfo::clear_to_id() {
  _impl_.to_id_ = 0u;
}
inline uint32_t EdgeInfo::_internal_to_id() const {
  return _impl_.to_id_;
}
inline uint32_t EdgeInfo::to_id() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.to_id)
  return _internal_to_id();
}
inline void EdgeInfo::_internal_set_to_id(uint32_t value) {
  
  _impl_.to_id_ = value;
}
inline void EdgeInfo::set_to_id(uint32_t value) {
  _internal_set_to_id(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.to_id)
}

// int32 span_count = 4;
inline void EdgeInfo::clear_span_count() {
  _impl_.span_count_ = 0;
}
inline int32_t EdgeInfo::_internal_span_count() const {
  return _impl_.span_count_;
}
inline int32_t EdgeInfo::span_count() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.span_count)
  return _internal_span_count();
}
inline void EdgeInfo::_internal_set_span_count(int32_t value) {
  
  _impl_.span_count_ = value;
}
inline void EdgeInfo::set_span_count(int32_t value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.span_count)
}

// string name = 5;
inline void EdgeInfo::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& EdgeInfo::name() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EdgeInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.name)
}
inline std::string* EdgeInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.EdgeInfo.name)
  return _s;
}
inline const std::string& EdgeInfo::_internal_name() const {
  return _impl_.name_.Get();
}
inline void EdgeInfo::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* EdgeInfo::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* EdgeInfo::release_name() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.EdgeInfo.name)
  return _impl_.name_.Release();
}
inline void EdgeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.EdgeInfo.name)
}

// double weight = 6;
inline void EdgeInfo::clear_weight() {
  _impl_.weight_ = 0;
}
inline double EdgeInfo::_internal_weight() const {
  return _impl_.weight_;
}
inline double EdgeInfo::weight() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.EdgeInfo.weight)
  return _internal_weight();
}
inline void EdgeInfo::_internal_set_weight(double value) {
  
  _impl_.weight_ = value;
}
inline void EdgeInfo::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.EdgeInfo.weight)
}

// -------------------------------------------------------------------

// GraphInfo

// repeated .serialize_transport_catalogue.VertexInfo vertexes = 1;
inline int GraphInfo::_internal_vertexes_size() const {
  return _impl_.vertexes_.size();
}
inline int GraphInfo::vertexes_size() const {
  return _internal_vertexes_size();
}
inline void GraphInfo::clear_vertexes() {
  _impl_.vertexes_.Clear();
}
inline ::serialize_transport_catalogue::VertexInfo* GraphInfo::mutable_vertexes(int index) {
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.GraphInfo.vertexes)
  return _impl_.vertexes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::VertexInfo >*
GraphInfo::mutable_vertexes() {
  // @@protoc_insertion_point(field_mutable_list:serialize_transport_catalogue.GraphInfo.vertexes)
  return &_impl_.vertexes_;
}
inline const ::serialize_transport_catalogue::VertexInfo& GraphInfo::_internal_vertexes(int index) const {
  return _impl_.vertexes_.Get(index);
}
inline const ::serialize_transport_catalogue::VertexInfo& GraphInfo::vertexes(int index) const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.GraphInfo.vertexes)
  return _internal_vertexes(index);
}
inline ::serialize_transport_catalogue::VertexInfo* GraphInfo::_internal_add_vertexes() {
  return _impl_.vertexes_.Add();
}
inline ::serialize_transport_catalogue::VertexInfo* GraphInfo::add_vertexes() {
  ::serialize_transport_catalogue::VertexInfo* _add = _internal_add_vertexes();
  // @@protoc_insertion_point(field_add:serialize_transport_catalogue.GraphInfo.vertexes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::VertexInfo >&
GraphInfo::vertexes() const {
  // @@protoc_insertion_point(field_list:serialize_transport_catalogue.GraphInfo.vertexes)
  return _impl_.vertexes_;
}

// repeated .serialize_transport_catalogue.EdgeInfo edges = 2;
inline int GraphInfo::_internal_edges_size() const {
  return _impl_.edges_.size();
}
inline int GraphInfo::edges_size() const {
  return _internal_edges_size();
}
inline void GraphInfo::clear_edges() {
  _impl_.edges_.Clear();
}
inline ::serialize_transport_catalogue::EdgeInfo* GraphInfo::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.GraphInfo.edges)
  return _impl_.edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::EdgeInfo >*
GraphInfo::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:serialize_transport_catalogue.GraphInfo.edges)
  return &_impl_.edges_;
}
inline const ::serialize_transport_catalogue::EdgeInfo& GraphInfo::_internal_edges(int index) const {
  return _impl_.edges_.Get(index);
}
inline const ::serialize_transport_catalogue::EdgeInfo& GraphInfo::edges(int index) const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.GraphInfo.edges)
  return _internal_edges(index);
}
inline ::serialize_transport_catalogue::EdgeInfo* GraphInfo::_internal_add_edges() {
  return _impl_.edges_.Add();
}
inline ::serialize_transport_catalogue::EdgeInfo* GraphInfo::add_edges() {
  ::serialize_transport_catalogue::EdgeInfo* _add = _internal_add_edges();
  // @@protoc_insertion_point(field_add:serialize_transport_catalogue.GraphInfo.edges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::serialize_transport_catalogue::EdgeInfo >&
GraphInfo::edges() const {
  // @@protoc_insertion_point(field_list:serialize_transport_catalogue.GraphInfo.edges)
  return _impl_.edges_;
}

// .serialize_transport_catalogue.RoutingSettings routing_settings = 3;
inline bool GraphInfo::_internal_has_routing_settings() const {
  return this != internal_default_instance() && _impl_.routing_settings_ != nullptr;
}
inline bool GraphInfo::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void GraphInfo::clear_routing_settings() {
  if (GetArenaForAllocation() == nullptr && _impl_.routing_settings_ != nullptr) {
    delete _impl_.routing_settings_;
  }
  _impl_.routing_settings_ = nullptr;
}
inline const ::serialize_transport_catalogue::RoutingSettings& GraphInfo::_internal_routing_settings() const {
  const ::serialize_transport_catalogue::RoutingSettings* p = _impl_.routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize_transport_catalogue::RoutingSettings&>(
      ::serialize_transport_catalogue::_RoutingSettings_default_instance_);
}
inline const ::serialize_transport_catalogue::RoutingSettings& GraphInfo::routing_settings() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.GraphInfo.routing_settings)
  return _internal_routing_settings();
}
inline void GraphInfo::unsafe_arena_set_allocated_routing_settings(
    ::serialize_transport_catalogue::RoutingSettings* routing_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.routing_settings_);
  }
  _impl_.routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize_transport_catalogue.GraphInfo.routing_settings)
}
inline ::serialize_transport_catalogue::RoutingSettings* GraphInfo::release_routing_settings() {
  
  ::serialize_transport_catalogue::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize_transport_catalogue::RoutingSettings* GraphInfo::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.GraphInfo.routing_settings)
  
  ::serialize_transport_catalogue::RoutingSettings* temp = _impl_.routing_settings_;
  _impl_.routing_settings_ = nullptr;
  return temp;
}
inline ::serialize_transport_catalogue::RoutingSettings* GraphInfo::_internal_mutable_routing_settings() {
  
  if (_impl_.routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize_transport_catalogue::RoutingSettings>(GetArenaForAllocation());
    _impl_.routing_settings_ = p;
  }
  return _impl_.routing_settings_;
}
inline ::serialize_transport_catalogue::RoutingSettings* GraphInfo::mutable_routing_settings() {
  ::serialize_transport_catalogue::RoutingSettings* _msg = _internal_mutable_routing_settings();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.GraphInfo.routing_settings)
  return _msg;
}
inline void GraphInfo::set_allocated_routing_settings(::serialize_transport_catalogue::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.GraphInfo.routing_settings)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize_transport_catalogue

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_graph_2eproto
