// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: svg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_svg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_svg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_svg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_svg_2eproto;
namespace serialize_transport_catalogue {
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rgb;
struct RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
}  // namespace serialize_transport_catalogue
PROTOBUF_NAMESPACE_OPEN
template<> ::serialize_transport_catalogue::Color* Arena::CreateMaybeMessage<::serialize_transport_catalogue::Color>(Arena*);
template<> ::serialize_transport_catalogue::Point* Arena::CreateMaybeMessage<::serialize_transport_catalogue::Point>(Arena*);
template<> ::serialize_transport_catalogue::Rgb* Arena::CreateMaybeMessage<::serialize_transport_catalogue::Rgb>(Arena*);
template<> ::serialize_transport_catalogue::Rgba* Arena::CreateMaybeMessage<::serialize_transport_catalogue::Rgba>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace serialize_transport_catalogue {

// ===================================================================

class Rgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.Rgb) */ {
 public:
  inline Rgb() : Rgb(nullptr) {}
  ~Rgb() override;
  explicit PROTOBUF_CONSTEXPR Rgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgb(const Rgb& from);
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgb& operator=(Rgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgb& from) {
    Rgb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.Rgb";
  }
  protected:
  explicit Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 g = 2;
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // uint32 b = 3;
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.Rgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t r_;
    uint32_t g_;
    uint32_t b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Rgba final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  ~Rgba() override;
  explicit PROTOBUF_CONSTEXPR Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgba& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgba& from) {
    Rgba::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kAFieldNumber = 4,
    kBFieldNumber = 3,
  };
  // uint32 r = 1;
  void clear_r();
  uint32_t r() const;
  void set_r(uint32_t value);
  private:
  uint32_t _internal_r() const;
  void _internal_set_r(uint32_t value);
  public:

  // uint32 g = 2;
  void clear_g();
  uint32_t g() const;
  void set_g(uint32_t value);
  private:
  uint32_t _internal_g() const;
  void _internal_set_g(uint32_t value);
  public:

  // double a = 4;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // uint32 b = 3;
  void clear_b();
  uint32_t b() const;
  void set_b(uint32_t value);
  private:
  uint32_t _internal_b() const;
  void _internal_set_b(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t r_;
    uint32_t g_;
    double a_;
    uint32_t b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorStrFieldNumber = 3,
    kRgbFieldNumber = 1,
    kRgbaFieldNumber = 2,
  };
  // string color_str = 3;
  void clear_color_str();
  const std::string& color_str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color_str();
  PROTOBUF_NODISCARD std::string* release_color_str();
  void set_allocated_color_str(std::string* color_str);
  private:
  const std::string& _internal_color_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color_str(const std::string& value);
  std::string* _internal_mutable_color_str();
  public:

  // .serialize_transport_catalogue.Rgb rgb = 1;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::serialize_transport_catalogue::Rgb& rgb() const;
  PROTOBUF_NODISCARD ::serialize_transport_catalogue::Rgb* release_rgb();
  ::serialize_transport_catalogue::Rgb* mutable_rgb();
  void set_allocated_rgb(::serialize_transport_catalogue::Rgb* rgb);
  private:
  const ::serialize_transport_catalogue::Rgb& _internal_rgb() const;
  ::serialize_transport_catalogue::Rgb* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::serialize_transport_catalogue::Rgb* rgb);
  ::serialize_transport_catalogue::Rgb* unsafe_arena_release_rgb();

  // .serialize_transport_catalogue.Rgba rgba = 2;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::serialize_transport_catalogue::Rgba& rgba() const;
  PROTOBUF_NODISCARD ::serialize_transport_catalogue::Rgba* release_rgba();
  ::serialize_transport_catalogue::Rgba* mutable_rgba();
  void set_allocated_rgba(::serialize_transport_catalogue::Rgba* rgba);
  private:
  const ::serialize_transport_catalogue::Rgba& _internal_rgba() const;
  ::serialize_transport_catalogue::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::serialize_transport_catalogue::Rgba* rgba);
  ::serialize_transport_catalogue::Rgba* unsafe_arena_release_rgba();

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_str_;
    ::serialize_transport_catalogue::Rgb* rgb_;
    ::serialize_transport_catalogue::Rgba* rgba_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// -------------------------------------------------------------------

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:serialize_transport_catalogue.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit PROTOBUF_CONSTEXPR Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Point& from) {
    Point::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "serialize_transport_catalogue.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:serialize_transport_catalogue.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double x_;
    double y_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_svg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Rgb

// uint32 r = 1;
inline void Rgb::clear_r() {
  _impl_.r_ = 0u;
}
inline uint32_t Rgb::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t Rgb::r() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgb.r)
  return _internal_r();
}
inline void Rgb::_internal_set_r(uint32_t value) {
  
  _impl_.r_ = value;
}
inline void Rgb::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgb.r)
}

// uint32 g = 2;
inline void Rgb::clear_g() {
  _impl_.g_ = 0u;
}
inline uint32_t Rgb::_internal_g() const {
  return _impl_.g_;
}
inline uint32_t Rgb::g() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgb.g)
  return _internal_g();
}
inline void Rgb::_internal_set_g(uint32_t value) {
  
  _impl_.g_ = value;
}
inline void Rgb::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgb.g)
}

// uint32 b = 3;
inline void Rgb::clear_b() {
  _impl_.b_ = 0u;
}
inline uint32_t Rgb::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t Rgb::b() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgb.b)
  return _internal_b();
}
inline void Rgb::_internal_set_b(uint32_t value) {
  
  _impl_.b_ = value;
}
inline void Rgb::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgb.b)
}

// -------------------------------------------------------------------

// Rgba

// uint32 r = 1;
inline void Rgba::clear_r() {
  _impl_.r_ = 0u;
}
inline uint32_t Rgba::_internal_r() const {
  return _impl_.r_;
}
inline uint32_t Rgba::r() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgba.r)
  return _internal_r();
}
inline void Rgba::_internal_set_r(uint32_t value) {
  
  _impl_.r_ = value;
}
inline void Rgba::set_r(uint32_t value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgba.r)
}

// uint32 g = 2;
inline void Rgba::clear_g() {
  _impl_.g_ = 0u;
}
inline uint32_t Rgba::_internal_g() const {
  return _impl_.g_;
}
inline uint32_t Rgba::g() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgba.g)
  return _internal_g();
}
inline void Rgba::_internal_set_g(uint32_t value) {
  
  _impl_.g_ = value;
}
inline void Rgba::set_g(uint32_t value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgba.g)
}

// uint32 b = 3;
inline void Rgba::clear_b() {
  _impl_.b_ = 0u;
}
inline uint32_t Rgba::_internal_b() const {
  return _impl_.b_;
}
inline uint32_t Rgba::b() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgba.b)
  return _internal_b();
}
inline void Rgba::_internal_set_b(uint32_t value) {
  
  _impl_.b_ = value;
}
inline void Rgba::set_b(uint32_t value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgba.b)
}

// double a = 4;
inline void Rgba::clear_a() {
  _impl_.a_ = 0;
}
inline double Rgba::_internal_a() const {
  return _impl_.a_;
}
inline double Rgba::a() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Rgba.a)
  return _internal_a();
}
inline void Rgba::_internal_set_a(double value) {
  
  _impl_.a_ = value;
}
inline void Rgba::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Rgba.a)
}

// -------------------------------------------------------------------

// Color

// .serialize_transport_catalogue.Rgb rgb = 1;
inline bool Color::_internal_has_rgb() const {
  return this != internal_default_instance() && _impl_.rgb_ != nullptr;
}
inline bool Color::has_rgb() const {
  return _internal_has_rgb();
}
inline void Color::clear_rgb() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgb_ != nullptr) {
    delete _impl_.rgb_;
  }
  _impl_.rgb_ = nullptr;
}
inline const ::serialize_transport_catalogue::Rgb& Color::_internal_rgb() const {
  const ::serialize_transport_catalogue::Rgb* p = _impl_.rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize_transport_catalogue::Rgb&>(
      ::serialize_transport_catalogue::_Rgb_default_instance_);
}
inline const ::serialize_transport_catalogue::Rgb& Color::rgb() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Color.rgb)
  return _internal_rgb();
}
inline void Color::unsafe_arena_set_allocated_rgb(
    ::serialize_transport_catalogue::Rgb* rgb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgb_);
  }
  _impl_.rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize_transport_catalogue.Color.rgb)
}
inline ::serialize_transport_catalogue::Rgb* Color::release_rgb() {
  
  ::serialize_transport_catalogue::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize_transport_catalogue::Rgb* Color::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.Color.rgb)
  
  ::serialize_transport_catalogue::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
  return temp;
}
inline ::serialize_transport_catalogue::Rgb* Color::_internal_mutable_rgb() {
  
  if (_impl_.rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize_transport_catalogue::Rgb>(GetArenaForAllocation());
    _impl_.rgb_ = p;
  }
  return _impl_.rgb_;
}
inline ::serialize_transport_catalogue::Rgb* Color::mutable_rgb() {
  ::serialize_transport_catalogue::Rgb* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.Color.rgb)
  return _msg;
}
inline void Color::set_allocated_rgb(::serialize_transport_catalogue::Rgb* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.Color.rgb)
}

// .serialize_transport_catalogue.Rgba rgba = 2;
inline bool Color::_internal_has_rgba() const {
  return this != internal_default_instance() && _impl_.rgba_ != nullptr;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::clear_rgba() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgba_ != nullptr) {
    delete _impl_.rgba_;
  }
  _impl_.rgba_ = nullptr;
}
inline const ::serialize_transport_catalogue::Rgba& Color::_internal_rgba() const {
  const ::serialize_transport_catalogue::Rgba* p = _impl_.rgba_;
  return p != nullptr ? *p : reinterpret_cast<const ::serialize_transport_catalogue::Rgba&>(
      ::serialize_transport_catalogue::_Rgba_default_instance_);
}
inline const ::serialize_transport_catalogue::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Color.rgba)
  return _internal_rgba();
}
inline void Color::unsafe_arena_set_allocated_rgba(
    ::serialize_transport_catalogue::Rgba* rgba) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgba_);
  }
  _impl_.rgba_ = rgba;
  if (rgba) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:serialize_transport_catalogue.Color.rgba)
}
inline ::serialize_transport_catalogue::Rgba* Color::release_rgba() {
  
  ::serialize_transport_catalogue::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::serialize_transport_catalogue::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.Color.rgba)
  
  ::serialize_transport_catalogue::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
  return temp;
}
inline ::serialize_transport_catalogue::Rgba* Color::_internal_mutable_rgba() {
  
  if (_impl_.rgba_ == nullptr) {
    auto* p = CreateMaybeMessage<::serialize_transport_catalogue::Rgba>(GetArenaForAllocation());
    _impl_.rgba_ = p;
  }
  return _impl_.rgba_;
}
inline ::serialize_transport_catalogue::Rgba* Color::mutable_rgba() {
  ::serialize_transport_catalogue::Rgba* _msg = _internal_mutable_rgba();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.Color.rgba)
  return _msg;
}
inline void Color::set_allocated_rgba(::serialize_transport_catalogue::Rgba* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgba_;
  }
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgba_ = rgba;
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.Color.rgba)
}

// string color_str = 3;
inline void Color::clear_color_str() {
  _impl_.color_str_.ClearToEmpty();
}
inline const std::string& Color::color_str() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Color.color_str)
  return _internal_color_str();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Color::set_color_str(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_str_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Color.color_str)
}
inline std::string* Color::mutable_color_str() {
  std::string* _s = _internal_mutable_color_str();
  // @@protoc_insertion_point(field_mutable:serialize_transport_catalogue.Color.color_str)
  return _s;
}
inline const std::string& Color::_internal_color_str() const {
  return _impl_.color_str_.Get();
}
inline void Color::_internal_set_color_str(const std::string& value) {
  
  _impl_.color_str_.Set(value, GetArenaForAllocation());
}
inline std::string* Color::_internal_mutable_color_str() {
  
  return _impl_.color_str_.Mutable(GetArenaForAllocation());
}
inline std::string* Color::release_color_str() {
  // @@protoc_insertion_point(field_release:serialize_transport_catalogue.Color.color_str)
  return _impl_.color_str_.Release();
}
inline void Color::set_allocated_color_str(std::string* color_str) {
  if (color_str != nullptr) {
    
  } else {
    
  }
  _impl_.color_str_.SetAllocated(color_str, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_str_.IsDefault()) {
    _impl_.color_str_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:serialize_transport_catalogue.Color.color_str)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  _impl_.x_ = 0;
}
inline double Point::_internal_x() const {
  return _impl_.x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  _impl_.x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  _impl_.y_ = 0;
}
inline double Point::_internal_y() const {
  return _impl_.y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:serialize_transport_catalogue.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  _impl_.y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:serialize_transport_catalogue.Point.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialize_transport_catalogue

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_svg_2eproto
